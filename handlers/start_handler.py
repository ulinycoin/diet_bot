from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from models.base import get_db_session
from models.user_model import User

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    age = State()
    gender = State()
    height = State()
    weight = State()
    goal = State()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    first_name = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    with get_db_session() as session:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if user:
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {first_name}!")
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
            await state.set_state(RegistrationStates.age)

@router.message(RegistrationStates.age)
async def process_age(message: Message, state: FSMContext):
    age = message.text
    if not age.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(age=int(age))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º/–∂):")
    await state.set_state(RegistrationStates.gender)

@router.message(RegistrationStates.gender)
async def process_gender(message: Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º", "–∂"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ '–º' –∏–ª–∏ '–∂'.")
        return
    await state.update_data(gender=gender)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(RegistrationStates.height)

@router.message(RegistrationStates.height)
async def process_height(message: Message, state: FSMContext):
    height = message.text
    if not height.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(height=int(height))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
    await state.set_state(RegistrationStates.weight)

@router.message(RegistrationStates.weight)
async def process_weight(message: Message, state: FSMContext):
    weight = message.text
    if not weight.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(weight=int(weight))
    await message.answer("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å? (–ø–æ—Ö—É–¥–µ–Ω–∏–µ/–Ω–∞–±–æ—Ä –≤–µ—Å–∞/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã):")
    await state.set_state(RegistrationStates.goal)

@router.message(RegistrationStates.goal)
async def process_goal(message: Message, state: FSMContext):
    goal = message.text.lower()
    if goal not in ["–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–Ω–∞–±–æ—Ä –≤–µ—Å–∞", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ü–µ–ª–µ–π: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –≤–µ—Å–∞, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    with get_db_session() as session:
        new_user = User(
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name,
            age=user_data["age"],
            gender=user_data["gender"],
            height=user_data["height"],
            weight=user_data["weight"],
            goal=goal,
        )
        session.add(new_user)
        session.commit()

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")],
            [KeyboardButton(text="üç¥ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"), KeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=keyboard)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
def register_start_handler(dp):
    dp.include_router(router)
